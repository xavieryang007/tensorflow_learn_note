vnote_backup_file_826537664 E:/code/tensorflow_learn_note/1/1-1/1-1.md
## HelloWorld

变成语言的学习基于都开始于“HelloWorld”，但是有时候过于简单的“HelloWorld”，影响你对这门学科的认识。虽然万丈高楼平地起，但是有时确实需要适当的激励。


### 推导y=2x


```
y=2x
```

```python
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

plotdata = {"batchsize": [], "loss": []}


def moving_average(a, w=10):
    if len(a) < w:
        return a[:]
    return [val if idx < w else sum(a[(idx - w):idx]) / w for idx, val in enumerate(a)]


# 生成模拟数据
train_X = np.linspace(-1, 1, 100000)
# y=2x，但是加入了噪声
#在tensorflow的开发中，会用到很多numpy的功能，所以numpy是学习tensorflow的基础
#很多人会想y=2x还用证明？我们这里给的数据并不是y=2x ，而是y≈2x
#比如x=0.1，y=0.21,或者x=0.12，y=0.20,直接看这些数据是没有任何关系的,因此当直接给你一个x的时候你可以输出y么？
#也许你会说y≈2x，给出一个近似值不就可以了。那是因为我们知道y≈2x，假定给的这些数据我们并不知道其中关系，那么给定x如何输出y的值
train_Y = 2 * train_X + np.random.randn(*train_X.shape) * 0.3  
# 显示模拟数据点
#plt 是python的一个图表库，是专门用来展示数据的条形图，折线图等
plt.plot(train_X, train_Y, 'ro', label='Original data')
plt.legend()
plt.show()

#下面推导过程需要用到代价函数，具体代价函数是什么下面会介绍
# 创建模型
# 占位符
X = tf.placeholder("float")
Y = tf.placeholder("float")
# 模型参数
W = tf.Variable(tf.random_normal([1]), name="weight")
b = tf.Variable(tf.zeros([1]), name="bias")

# 前向结构
z = tf.multiply(X, W) + b

# 反向优化
cost = tf.reduce_mean(tf.square(Y - z))
learning_rate = 0.01
optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)  # Gradient descent

# 初始化变量
init = tf.global_variables_initializer()
# 训练参数
training_epochs = 20
display_step = 2

saver = tf.train.Saver(max_to_keep=1)
# 启动session
with tf.Session() as sess:
    sess.run(init)

    # Fit all training data
    for epoch in range(training_epochs):
        for (x, y) in zip(train_X, train_Y):
            sess.run(optimizer, feed_dict={X: x, Y: y})

        # 显示训练中的详细信息
        if epoch % display_step == 0:
            loss = sess.run(cost, feed_dict={X: train_X, Y: train_Y})
            print("Epoch:", epoch + 1, "cost=", loss, "W=", sess.run(W), "b=", sess.run(b))
            if not (loss == "NA"):
                plotdata["batchsize"].append(epoch)
                plotdata["loss"].append(loss)

    print(" Finished!")
    print("cost=", sess.run(cost, feed_dict={X: train_X, Y: train_Y}), "W=", sess.run(W), "b=", sess.run(b))
    # print ("cost:",cost.eval({X: train_X, Y: train_Y}))

    # 图形显示
    plt.plot(train_X, train_Y, 'ro', label='Original data')
    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line')
    plt.legend()
    plt.show()

    plotdata["avgloss"] = moving_average(plotdata["loss"])
    plt.figure(1)
    plt.subplot(211)
    plt.plot(plotdata["batchsize"], plotdata["avgloss"], 'b--')
    plt.xlabel('Minibatch number')
    plt.ylabel('Loss')
    plt.title('Minibatch run vs. Training loss')

    plt.show()
    saver.save(sess, "model/my-model", global_step=epoch)
    print("x=0.2，z=", sess.run(z, feed_dict={X: 0.2}))
```


### 代价函数

##### 定义 

代价函数，又叫损失函数或成本函数，它是将一个或多个变量的事件阈值映射到直观地表示与该事件。 一个优化问题试图最小化损失函数。 目标函数是损失函数或其负值，在这种情况下它将被最大化

其中我们这里用到的代价函数是均方差公式，公式如下
![](_v_images/1539842499_4895.gif)

```mathjax
$$
J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^{m}(y_\alpha^{(i)},y^{(i)})^2=\frac{1}{2m}*(y_\alpha^{(1)}-y^{(1)})^2*(y_\alpha^{(2)}-y^{(2)})^2\cdots(y_\alpha^{(m)}-y^{(m)})^2
$$
```


